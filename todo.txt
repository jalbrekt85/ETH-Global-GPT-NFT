pragma solidity ^0.8.0;

contract Storage {
    


   function tokenURI() public view returns (string memory) {
        

        string[8] memory parts;
        parts[0] = '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 350 350"><style>.base { fill: url(#linear-gradient); font-family: Impact; font-size: 25px; fontWeight: bold; }</style><defs><linearGradient id="linear-gradient" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="800" y2="0"><stop offset="0" stopColor="#38b2ac" /><stop offset="0.3333333333333333" stopColor="#5dc28f" /><stop offset="0.6666666666666666" stopColor="#9fcb66" /><stop offset="1" stopColor="#ecc94b" /></linearGradient></defs><rect width="100%" height="100%" fill="black" /><text x="10" y="20" class="base">';

        parts[1] = "Weapon 1";

        parts[2] = '</text><text x="10" y="40" class="base">';

        parts[3] = "Attire 1";

        parts[4] = '</text><text x="10" y="60" class="base">';

        parts[5] = "Accessories 1";

        parts[6] = '</text><text x="10" y="80" class="base">';

        parts[7] = '</text></svg>';

        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));
        output = string(abi.encodePacked(output, parts[7]));
        
        string memory json = encode(bytes(string(abi.encodePacked('{"name": "Bag #', "1", '", "description": "Loot is randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Loot in any way you want.", "image": "data:image/svg+xml;base64,', encode(bytes(output)), '"}'))));
        output = string(abi.encodePacked('data:application/json;base64,', json));

        return output;
    }

    function tokenImage() public view returns (string memory) {
      
        string[8] memory parts;
        parts[0] = '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 350 350"><style>.base { fill: url(#linear-gradient); font-family: Impact; font-size: 25px; fontWeight: bold; }</style><defs><linearGradient id="linear-gradient" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="800" y2="0"><stop offset="0" stopColor="#38b2ac" /><stop offset="0.3333333333333333" stopColor="#5dc28f" /><stop offset="0.6666666666666666" stopColor="#9fcb66" /><stop offset="1" stopColor="#ecc94b" /></linearGradient></defs><rect width="100%" height="100%" fill="black" /><text x="10" y="20" class="base">';

        parts[1] = "Weapon 1";

        parts[2] = '</text><text x="10" y="40" class="base">';

        parts[3] = "Attire 1";

        parts[4] = '</text><text x="10" y="60" class="base">';

        parts[5] = "Accessories 1";

        parts[6] = '</text><text x="10" y="80" class="base">';

        parts[7] = '</text></svg>';

        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));
        output = string(abi.encodePacked(output, parts[7]));
        

        
        return output;
    }

    bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /// @notice Encodes some bytes to the base64 representation
    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((len + 2) / 3);

        // Add some extra buffer at the end
        bytes memory result = new bytes(encodedLen + 32);

        bytes memory table = TABLE;

        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)

            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)

                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
                out := shl(224, out)

                mstore(resultPtr, out)

                resultPtr := add(resultPtr, 4)
            }

            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }

            mstore(result, encodedLen)
        }

        return string(result);
    }

}